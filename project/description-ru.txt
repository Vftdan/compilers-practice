Программа принимает на вход грамматики с правилами лексера и файл с парами правило ANTLR - стандартная группа подсветки Vim.
Программа запускается командой `java ANTLRv4Parser`. В аргументы командной строки необходимо передать список файлов, в которых описана лексика языка. После ключа `-H` можно передать файл с описанием подсветки, после `-o` -- директорию, куда записать выходной файл, после `-f` -- тип файла (название синтаксиса), который также определяет имя выходного файла.
Файл описания подсветки состоит из 2х столбцов, в левом записаны идентификаторы правил ANTLR, в правом -- имена групп подсветки Vim, от которых они должны унаследовать оформление. Чтобы унаследовать оформление от другого правила ANTLR, необходимо записать его идентификатор с добавленным слева символом `#` во второй столбец. Строки, начинающиеся с символа `#`, пропускаются.

Основа программы -- перевод регулярных выражений из формата ANTLR в формат Vim.

Описание поддерживаемых регулярных выражений и учитываемой программой грамматики ANTLR.
В одинарных кавычках указываются символы или их последовательности (строки). В квадратных скобках указываются множества символов, символом `-` внутри них указывается их диапазон. Внутри кавычек используются escape последовательности \b, \t, \n, \f, \r, \", \', \\, \uXXXX. Внутри квадратных скобок можно использовать также \], \-. Вне квадратных скобок для указания диапазона символов используется `..`. `.` обозначает универсальное множество символов. Символ, диапазон символов и объединение множеств при помощи `|` также является множеством. Знак `~` слева от множества обозначает множество, обратное данному (обработка вложенных отрицаний и отрицаний универсального множества в программе не реализована). Последовательная запись множеств символов и/или последовательностей символов обозначает множество последовательностей, получаемое конкатенацией. `|` обозначает объединение множеств последовательностей символов. Круглые скобки используются для группировки. Повторения множеств последовательностей задаётся дописыванием справа `?`, `*`, `+`. Они соответственно обозначают повторение 0 или 1, 0 и более, 1 и более раз. Дополнительный `?` справа переводит повторение из жадного в ленивый режим. Внутри регулярных выражений можно ссылаться на другие лексические правила, если не создаётся циклических зависимостей. Встроенное правило `EOF` обозначает конец файла.
Лексическое правило задаётся последовательностью идентификатор правила, `:`, регулярное выражение, `;`. Если правило не должно рассматриваться отдельно, а только как часть других лексических правил, перед идентификатором ставится ключевое слово `fragment`. После регулярного выражения может идти `->` и название действия, которое будет выполнено при нахождении подходящего под правило участка кода. Действия кроме `pushMode`, `popMode` программой игнорируются.  Данные действия соответственно входят и выходят из другого режима лексера, в котором могут быть определены другие лексические правила. Правила могут ссылаться на правила из других режимов. Файл начинается с `grammar` название грамматики `;`. `mode` название режима `;` обозначают начало перечисления правил из другого режима. Идентификаторы правил чувствительны к регистру. Заданные раньше правила имеют больший приоритет.

Описание используемых возможностей регулярных выражений и используемых команд Vim.
Регулярное выражение задаётся данной последовательностью: `/\v` тело выражения `/`. `/` обозначают границы, `\v` переводит выражение в `very magic` режим, что влияет на правила использования `\`. В данном режиме символы от `A` до `Z`, от `a` до `z`, от `0` до `9`, `_` воспринимаются буквально, иные символы заэкранированные '\' также воспринимаются буквально. Множества символов задаются в квадратных скобках, `-` внутри обозначает диапазон. Для отрицания множеств после `[` ставится `^`. Поддерживаются escape последовательности \b, \t, \n, \r, \xXX, \uXXXX. Перед \xXX, \uXXXX вне квадратных скобок необходимо ставить `%`. Для группировки используется `%(`, `)` (`%` нужен, чтобы группам не присваивался номер, количество которых ограничено девятью). Повторения задаются в `{`, `}`. Через запятую указываются нижняя и верхняя (при наличии) границы количества повторений. Для ленивого режима после `{` ставится `-`. `|` обозначает объединение. `^` и `$` вне квадратных скобок обозначают начало и конец строки, `%$` -- конец файла, `\_.` любой символ (включая перенос строки).
`syn match ` название группы, регулярное выражение создаёт группу подсветки. `syn region ` создаёт группу подсветки с условиями начала и конца, которые задаются соответственно `start=` регулярное выражение и `end=` регулярное выражение. Перед `start`, `end` можно ставить `matchgroup=` название группы, чтобы отнести границы региона к другой группе. После основных аргументов данных команд задаются дополнительные опции: при наличии `transparent` группа наследует подсветку у внешнего элемента; `contained` обозначает, что группа может быть только частью другой группы, `contains=` названия групп через `,` перечисляет группы, которые могут встречаться внутри данной группы. Названия групп нечувствительны к регистру. Заданные позже группы имеют больший приоритет. `hi def link ` название новой группы, название старой группы задаёт цвет новой группы унаследованным от старой.

Пример 1

Грамматика:

grammar Hello;
r : HELLO ID ;
HELLO : 'hello' ;
ID : [a-z]+ ;
WS : [ \t\r\n]+ -> skip ;

Файл подсветки:

ID Identifier
HELLO Keyword

Полученный файл hello.vim:

syn match helloWS /\v[\ \t\r\n]{1,}/ transparent
syn match helloID /\v[a-z]{1,}/
syn match helloHELLO /\vhello/

hi def link helloHELLO Keyword
hi def link helloID Identifier

Подсветка:

img1

Пример 2

Грамматика: https://github.com/antlr/grammars-v4/tree/master/antlr4

Файл подсветки:

COLON Delimiter
SEMI Delimiter
RARROW Operator
STAR Operator
PLUS Operator
QUESTION Operator
NOT Operator
OR Operator
RANGE Operator
LBRACE Delimiter
RBRACE Delimiter
LBrack Delimiter
RBrack Delimiter
LParen Delimiter
RParen Delimiter
LineComment Comment
DocComment Comment
BlockComment Comment
EscSeq Special
SQuoteLiteral Constant
LexerCharSet Constant
SQuote Delimiter
Id Identifier
GRAMMAR Keyword
FRAGMENT Keyword
LEXER Keyword
PARSER Keyword
RETURNS Keyword
OPTIONS Keyword
IMPORT Keyword
TOKENS Keyword
MODE Keyword
CHANNELS Keyword

Подсветка:

img2

Выражения в квадратных скобках подсвечены неправильно, т. к. определены не через грамматические правила.

Пример 3

Грамматика: https://github.com/antlr/grammars-v4/tree/master/dot

Файл подсветки:

STRICT Keyword
GRAPH Keyword
DIGRAPH Keyword
NODE Keyword
EDGE Keyword
SUBGRAPH Keyword
STRING Constant
ID Identifier
HTML_STRING Constant
TAG Special
COMMENT Comment
LINE_COMMENT Comment

Подсветка:

img3
