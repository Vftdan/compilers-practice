grammar FloatExpr;
LPAR : '(';
RPAR : ')';
PLUS : '+';
MINUS : '-';
ASTERISK : '*';
SLASH : '/';
POW : '**';
fragment DOT : '.';
fragment DIGIT : [0-9];
additive_op : PLUS | MINUS;
unary_op : PLUS | MINUS;
multiplicative_op : ASTERISK | SLASH;
operator : additive_op | multiplicative_op | POW;
WS : [ \t\r\n]+ -> skip;
FLOAT : DOT DIGIT+ | DIGIT+ (DOT DIGIT*)?;
//expr : expr operator expr | additive_op expr | LPAR expr RPAR | FLOAT;
exprAtom : FLOAT | LPAR exprSum RPAR;
exprPow : exprAtom POW unary_op? exprPow | exprAtom;
exprProd : exprProd multiplicative_op unary_op? exprPow | exprPow;
exprSum : exprSum additive_op unary_op? exprProd | unary_op? exprProd;
expr : exprSum;
lang : expr EOF;
