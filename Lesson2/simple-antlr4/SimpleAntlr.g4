grammar SimpleAntlr;
EOL : ('\r\n'|'\r'|'\n');
WS : (EOL | [ \t])+;
NOTEOL : [^\r\n]*;
INLINE_COMMENT_START : '//';
inlineComment : INLINE_COMMENT_START NOTEOL EOL;
BLOCK_COMMENT_START : '/*';
BLOCK_COMMENT_END : '*/';
BLOCK_COMMENT_CONTENT : ([^*]+|)*;
blockComment : BLOCK_COMMENT_START BLOCK_COMMENT_CONTENT BLOCK_COMMENT_END;
comment : (inlineComment | blockComment);
ID : [a-zA-Z][a-zA-Z0-9_]*;
fragment SC : ';';
fragment QUOTE : '\'';
ESQSEQ : '\\' .;
fragment STRING_TERM_CHAR : [^'\\];
fragment STRING_CHAR : STRING_TERM_CHAR | ESQSEQ;
string : QUOTE STRING_CHAR* QUOTE;
GRAMMAR_KW : 'grammar';
FRAGMENT_KW : 'fragment';
fragment LBRACK : '[';
fragment RBRACK : ']';
fragment LBRACE : '{';
fragment RBRACE : '}';
fragment LPAR : '(';
fragment RPAR : ')';
fragment COMMA : ',';
fragment PIPE : '|';
fragment COLON : ':';
fragment CARET : '^';
fragment DOT : '.';
INT : [0-9]+;
EXPLICIT_QUANTIFIER : LBRACE INT? COMMA INT? RBRACE;
QUANTIFIER : [*+?] | EXPLICIT_QUANTIFIER;
//EXPR_QUANTIFIED : expr QUANTIFIER;
//EXPR_PAR : LPAR expr RPAR;
//EXPR_UNION : expr PIPE EXPR;
SET_TERM_CHAR : [^\]\\];
SET_CHAR : SET_TERM_CHAR | ESQSEQ;
EXPR_SET : LBRACK CARET? SET_CHAR+ RBRACK;
ACTION : '->' [^;]*;
//expr : STRING | EXPR_SET | EXPR_UNION | EXPR_PAR | EXPR_QUANTIFIED;
expr : string | EXPR_SET | DOT | expr PIPE expr | LPAR expr RPAR | expr QUANTIFIER;
exprAct : expr ACTION?;
grammarLine : GRAMMAR_KW WS ID SC;
exprLine : (FRAGMENT_KW WS)? ID COLON exprAct SC;
line : grammarLine | exprLine;
lang : line*;
